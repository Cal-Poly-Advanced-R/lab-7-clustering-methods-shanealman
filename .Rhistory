comparison = max(comparison)
final_index = which(comparison == dists, arr.ind = T)
dists = dists[final_index[2,],]
row.names(dists)[1] = merges[i]
merges = c(merges, paste(row.names(dists), sep = '', collapse = ''))
break
}
i = i + 1
index = which(dists == min(dists, na.rm = T), arr.ind = T)
index = as.matrix(sample_n(data.frame(index),1))
merges = c(merges, paste(row.names(dists[index,]), sep = '', collapse = ''))
new_dists = dists[-index,-index]
comparison = dists[-as.numeric(index),as.numeric(index)]
if(length(new_dists) > 1){
comparison = apply(comparison, 1, max)
dists = cbind(comparison, new_dists)
dists = rbind(c(NA, comparison), dists)
row.names(dists)[1] = merges[i]
} else {
comparison = max(comparison)
final_index = which(comparison == dists, arr.ind = T)
dists = dists[final_index[2,],]
row.names(dists)[1] = merges[i]
merges = c(merges, paste(row.names(dists), sep = '', collapse = ''))
break
}
i = i + 1
index = which(dists == min(dists, na.rm = T), arr.ind = T)
index = as.matrix(sample_n(data.frame(index),1))
merges = c(merges, paste(row.names(dists[index,]), sep = '', collapse = ''))
new_dists = dists[-index,-index]
comparison = dists[-as.numeric(index),as.numeric(index)]
comparison = max(comparison)
comparison
dists
row.names(dists)
merges
x = matrix(rnorm(12, sd = 20), ncol = 2)
dists = diag.remove(as.matrix(dist(x)))
merges = NULL
i = 1
index = which(dists == min(dists, na.rm = T), arr.ind = T)
index = as.matrix(sample_n(data.frame(index),1))
merges = c(merges, paste(row.names(dists[index,]), sep = '', collapse = ''))
new_dists = dists[-index,-index]
comparison = dists[-as.numeric(index),as.numeric(index)]
if(length(new_dists) > 1){
comparison = apply(comparison, 1, max)
dists = cbind(comparison, new_dists)
dists = rbind(c(NA, comparison), dists)
row.names(dists)[1] = merges[i]
} else {
comparison = max(comparison)
final_index = which(comparison == dists, arr.ind = T)
dists = dists[final_index[2,],]
row.names(dists)[1] = merges[i]
merges = c(merges, paste(row.names(dists), sep = '', collapse = ''))
break
}
i = i + 1
index = which(dists == min(dists, na.rm = T), arr.ind = T)
index = as.matrix(sample_n(data.frame(index),1))
merges = c(merges, paste(row.names(dists[index,]), sep = '', collapse = ''))
new_dists = dists[-index,-index]
comparison = dists[-as.numeric(index),as.numeric(index)]
if(length(new_dists) > 1){
comparison = apply(comparison, 1, max)
dists = cbind(comparison, new_dists)
dists = rbind(c(NA, comparison), dists)
row.names(dists)[1] = merges[i]
} else {
comparison = max(comparison)
final_index = which(comparison == dists, arr.ind = T)
dists = dists[final_index[2,],]
row.names(dists)[1] = merges[i]
merges = c(merges, paste(row.names(dists), sep = '', collapse = ''))
break
}
i = i + 1
index = which(dists == min(dists, na.rm = T), arr.ind = T)
index = as.matrix(sample_n(data.frame(index),1))
merges = c(merges, paste(row.names(dists[index,]), sep = '', collapse = ''))
new_dists = dists[-index,-index]
comparison = dists[-as.numeric(index),as.numeric(index)]
if(length(new_dists) > 1){
comparison = apply(comparison, 1, max)
dists = cbind(comparison, new_dists)
dists = rbind(c(NA, comparison), dists)
row.names(dists)[1] = merges[i]
} else {
comparison = max(comparison)
final_index = which(comparison == dists, arr.ind = T)
dists = dists[final_index[2,],]
row.names(dists)[1] = merges[i]
merges = c(merges, paste(row.names(dists), sep = '', collapse = ''))
break
}
i = i + 1
index = which(dists == min(dists, na.rm = T), arr.ind = T)
index = as.matrix(sample_n(data.frame(index),1))
merges = c(merges, paste(row.names(dists[index,]), sep = '', collapse = ''))
new_dists = dists[-index,-index]
comparison = dists[-as.numeric(index),as.numeric(index)]
comparison = max(comparison)
dists
row.names(dists)
dists = diag.remove(as.matrix(dist(x)))
merges = NULL
i = 1
while(length(merges) < nrow(x)){
index = which(dists == min(dists, na.rm = T), arr.ind = T)
index = as.matrix(sample_n(data.frame(index),1))
merges = c(merges, paste(row.names(dists[index,]), sep = '', collapse = ''))
new_dists = dists[-index,-index]
comparison = dists[-as.numeric(index),as.numeric(index)]
if(length(new_dists) > 1){
comparison = apply(comparison, 1, max)
dists = cbind(comparison, new_dists)
dists = rbind(c(NA, comparison), dists)
row.names(dists)[1] = merges[i]
} else {
merges = c(merges, paste(row.names(dists), sep = '', collapse = ''))
break
}
i = i + 1
}
merges
hier_clust = function(x){
dists = diag.remove(as.matrix(dist(x)))
merges = NULL
i = 1
while(length(merges) < nrow(x)){
index = which(dists == min(dists, na.rm = T), arr.ind = T)
index = as.matrix(sample_n(data.frame(index),1))
merges = c(merges, paste(row.names(dists[index,]), sep = '', collapse = ''))
new_dists = dists[-index,-index]
comparison = dists[-as.numeric(index),as.numeric(index)]
if(length(new_dists) > 1){
comparison = apply(comparison, 1, max)
dists = cbind(comparison, new_dists)
dists = rbind(c(NA, comparison), dists)
row.names(dists)[1] = merges[i]
} else {
merges = c(merges, paste(row.names(dists), sep = '', collapse = ''))
break
}
i = i + 1
}
return(merges)
}
x = matrix(rnorm(12, sd = 20), ncol = 2)
hier_clust(x)
hier_clust = function(x){
dists = diag.remove(as.matrix(dist(x)))
merges = NULL
i = 1
while(length(merges) < nrow(x)){
index = which(dists == min(dists, na.rm = T), arr.ind = T)
index = as.matrix(sample_n(data.frame(index),1))
merges = c(merges, paste(row.names(dists[index,]), sep = '', collapse = ''))
new_dists = dists[-index,-index]
comparison = dists[-as.numeric(index),as.numeric(index)]
if(length(new_dists) > 1){
comparison = apply(comparison, 1, max)
dists = cbind(comparison, new_dists)
dists = rbind(c(NA, comparison), dists)
row.names(dists)[1] = merges[i]
} else {
merges = c(merges, paste(row.names(dists), sep = '', collapse = ''))
break
}
i = i + 1
}
return(merges)
}
x = matrix(rnorm(12, sd = 20), ncol = 2)
hier_clust(x)
x = matrix(rnorm(12, sd = 20), ncol = 2)
hier_clust(x)
x = matrix(rnorm(12, sd = 20), ncol = 2)
hier_clust(x)
x = matrix(rnorm(12, sd = 20), ncol = 2)
hier_clust(x)
x = matrix(rnorm(12, sd = 20), ncol = 2)
hier_clust(x)
x = matrix(rnorm(12, sd = 20), ncol = 2)
hier_clust(x)
x = matrix(rnorm(12, sd = 20), ncol = 3)
hier_clust(x)
x = matrix(rnorm(12, sd = 20), ncol = 3)
hier_clust(x)
x = matrix(rnorm(12, sd = 20), ncol = 3)
hier_clust(x)
x = matrix(rnorm(12, sd = 20), ncol = 3)
hier_clust(x)
x = matrix(rnorm(12, sd = 20), ncol = 3)
hier_clust(x)
mtcars
df1 = select(mtcars, mpg[1:10], cyl[1:10])
df1 = select(mtcars, mpg, cyl)
df1
x
df1 = head(df1, 6)
df1
hier_clust = function(x){
dists = diag.remove(as.matrix(dist(x)))
merges = NULL
i = 1
while(length(merges) < nrow(x)){
index = which(dists == min(dists, na.rm = T), arr.ind = T)
index = as.matrix(sample_n(data.frame(index),1))
merges = c(merges, paste(row.names(dists[index,]), sep = '', collapse = ''))
new_dists = dists[-index,-index]
comparison = dists[-as.numeric(index),as.numeric(index)]
if(length(new_dists) > 1){
comparison = apply(comparison, 1, max)
dists = cbind(comparison, new_dists)
dists = rbind(c(NA, comparison), dists)
row.names(dists)[1] = merges[i]
} else {
merges = c(merges, paste(row.names(dists), sep = '', collapse = ''))
break
}
i = i + 1
}
return(merges)
}
hier_clust(df1)
m = hclust(dist(df1))
plot(m)
hier_clust = function(x){
dists = diag.remove(as.matrix(dist(x)))
merges = NULL
i = 1
while(length(merges) < nrow(x)){
index = which(dists == min(dists, na.rm = T), arr.ind = T)
index = as.matrix(sample_n(data.frame(index),1))
merges = c(merges, paste(row.names(dists[index,]), sep = ',', collapse = ''))
new_dists = dists[-index,-index]
comparison = dists[-as.numeric(index),as.numeric(index)]
if(length(new_dists) > 1){
comparison = apply(comparison, 1, max)
dists = cbind(comparison, new_dists)
dists = rbind(c(NA, comparison), dists)
row.names(dists)[1] = merges[i]
} else {
merges = c(merges, paste(row.names(dists), sep = ',', collapse = ''))
break
}
i = i + 1
}
return(merges)
}
hier_clust(df1)
hier_clust = function(x){
dists = diag.remove(as.matrix(dist(x)))
merges = NULL
i = 1
while(length(merges) < nrow(x)){
index = which(dists == min(dists, na.rm = T), arr.ind = T)
index = as.matrix(sample_n(data.frame(index),1))
merges = c(merges, paste(row.names(dists[index,]), sep = ' ', collapse = ''))
new_dists = dists[-index,-index]
comparison = dists[-as.numeric(index),as.numeric(index)]
if(length(new_dists) > 1){
comparison = apply(comparison, 1, max)
dists = cbind(comparison, new_dists)
dists = rbind(c(NA, comparison), dists)
row.names(dists)[1] = merges[i]
} else {
merges = c(merges, paste(row.names(dists), sep = ' ', collapse = ''))
break
}
i = i + 1
}
return(merges)
}
hier_clust(df1)
hier_clust = function(x){
dists = diag.remove(as.matrix(dist(x)))
merges = NULL
i = 1
while(length(merges) < nrow(x)){
index = which(dists == min(dists, na.rm = T), arr.ind = T)
index = as.matrix(sample_n(data.frame(index),1))
merges = c(merges, paste(row.names(dists[index,]), sep = '', collapse = ','))
new_dists = dists[-index,-index]
comparison = dists[-as.numeric(index),as.numeric(index)]
if(length(new_dists) > 1){
comparison = apply(comparison, 1, max)
dists = cbind(comparison, new_dists)
dists = rbind(c(NA, comparison), dists)
row.names(dists)[1] = merges[i]
} else {
merges = c(merges, paste(row.names(dists), sep = '', collapse = ','))
break
}
i = i + 1
}
return(merges)
}
hier_clust(df1)
hier_clust = function(x){
dists = diag.remove(as.matrix(dist(x)))
merges = NULL
i = 1
while(length(merges) < nrow(x)){
index = which(dists == min(dists, na.rm = T), arr.ind = T)
index = as.matrix(sample_n(data.frame(index),1))
merges = c(merges, paste(row.names(dists[index,]), sep = '', collapse = ','))
new_dists = dists[-index,-index]
comparison = dists[-as.numeric(index),as.numeric(index)]
if(length(new_dists) > 1){
comparison = apply(comparison, 1, max)
dists = cbind(comparison, new_dists)
dists = rbind(c(NA, comparison), dists)
row.names(dists)[1] = merges[i]
} else {
merges = c(merges, paste(row.names(dists), sep = '', collapse = ', '))
break
}
i = i + 1
}
return(merges)
}
hier_clust(df1)
hier_clust = function(x){
dists = diag.remove(as.matrix(dist(x)))
merges = NULL
i = 1
while(length(merges) < nrow(x)){
index = which(dists == min(dists, na.rm = T), arr.ind = T)
index = as.matrix(sample_n(data.frame(index),1))
merges = c(merges, paste(row.names(dists[index,]), sep = '', collapse = ','))
new_dists = dists[-index,-index]
comparison = dists[-as.numeric(index),as.numeric(index)]
if(length(new_dists) > 1){
comparison = apply(comparison, 1, max)
dists = cbind(comparison, new_dists)
dists = rbind(c(NA, comparison), dists)
row.names(dists)[1] = merges[i]
} else {
merges = c(merges, paste(row.names(dists), sep = '', collapse = ' , '))
break
}
i = i + 1
}
return(merges)
}
hier_clust(df1)
hier_clust = function(x){
dists = diag.remove(as.matrix(dist(x)))
merges = NULL
i = 1
while(length(merges) < nrow(x)){
index = which(dists == min(dists, na.rm = T), arr.ind = T)
index = as.matrix(sample_n(data.frame(index),1))
merges = c(merges, paste(row.names(dists[index,]), sep = ' ', collapse = ','))
new_dists = dists[-index,-index]
comparison = dists[-as.numeric(index),as.numeric(index)]
if(length(new_dists) > 1){
comparison = apply(comparison, 1, max)
dists = cbind(comparison, new_dists)
dists = rbind(c(NA, comparison), dists)
row.names(dists)[1] = merges[i]
} else {
merges = c(merges, paste(row.names(dists), sep = ' ', collapse = ','))
break
}
i = i + 1
}
return(merges)
}
hier_clust(df1)
x = matrix(rnorm(12, sd = 20), ncol = 2)
hier_clust(x)
hier_clust = function(x){
dists = diag.remove(as.matrix(dist(x)))
merges = NULL
i = 1
while(length(merges) < nrow(x)){
index = which(dists == min(dists, na.rm = T), arr.ind = T)
index = as.matrix(sample_n(data.frame(index),1))
merges = c(merges, paste(row.names(dists[index,]), sep = '', collapse = ','))
new_dists = dists[-index,-index]
comparison = dists[-as.numeric(index),as.numeric(index)]
if(length(new_dists) > 1){
comparison = apply(comparison, 1, max)
dists = cbind(comparison, new_dists)
dists = rbind(c(NA, comparison), dists)
row.names(dists)[1] = merges[i]
} else {
merges = c(merges, paste(row.names(dists), sep = '', collapse = ','))
break
}
i = i + 1
}
return(merges)
}
hier_clust(df1)
library(clust431)
?hier_clust
?cutree
?as.dendrogram
df1 = select(mtcars, mpg, hp)
df1
df1 = head(df1, 6)
hier__clust(df1)
hier_clust(df1)
a = hier_clust(df1)
as.dendrogram(a)
library(tidyverse)
?dist
method = 'euclidean'
df1
dist(df1, method = method)
ifelse(method == 'euclidean', 'euclidean', 'minkowski')
dist(df1, methoh = minkowski)
dist(df1, method = minkowski)
dist(df1, method = 'minkowski')
as.matrix(dist(df1, method = 'minkowski'))
df1
dist(df1, method = ifelse(method == 'euclidean', 'euclidean', 'minkowski'))
method = 'aedf'
dist(df1, method = ifelse(method == 'euclidean', 'euclidean', 'minkowski'))
dist(df1, method = ifelse(method == 'euclidean', 'euclidean', 'minkowski'))
dist(df1, 'euclidean')
dist(df1, 'minkowski', p =4)
dist(df1, 'manhattan')
dist(df1, 'canberra')
dist(df1, method = ifelse(method == 'euclidean', 'euclidean', 'manhattan'))
hier_clust = function(x, method = 'euclidean'){
dists = diag.remove(as.matrix(
dist(x, method = ifelse(method == 'euclidean', 'euclidean', 'manhattan'))))
merges = NULL
i = 1
while(length(merges) < nrow(x)){
index = which(dists == min(dists, na.rm = T), arr.ind = T)
index = as.matrix(sample_n(data.frame(index),1))
merges = c(merges, paste(row.names(dists[index,]), sep = '', collapse = ','))
new_dists = dists[-index,-index]
comparison = dists[-as.numeric(index),as.numeric(index)]
if(length(new_dists) > 1){
comparison = apply(comparison, 1, max)
dists = cbind(comparison, new_dists)
dists = rbind(c(NA, comparison), dists)
row.names(dists)[1] = merges[i]
} else {
merges = c(merges, paste(row.names(dists), sep = '', collapse = ','))
break
}
i = i + 1
}
return(merges)
}
hier_clust(df1, )
hier_clust(df1)
hier_clust(df1, manhattan)
hier_clust(df1, 'manhattan')
library(clust431)
library(clust431)
?heir_clust
?hier_clust
library(clust431)
df1
kmeans(mtcars, 3)
k_means = function(x, centers, PCA = F, plus.plus = F){
if(PCA == T){
x = princomp(x)
x = x$scores %>% as_tibble() %>% select(Comp.1, Comp.2)
}
k.means = sample_n(x, centers)
ik.means = 0
if(plus.plus == T){
k.means = sample_n(x, 1)
for(i in 2:centers){
tempdf = as.matrix(x)
dists = rep(NA, nrow(tempdf))
for(i in 1:nrow(tempdf)){
tempdist = as.matrix(dist(rbind(k.means, tempdf[i,])))
tempdist = tempdist[nrow(tempdist), 1:nrow(tempdist)-1]
dists[i] = min(tempdist)
}
tempdf = data.frame(tempdf)
weights = dists^2/sum(dists^2)
k.means = rbind(k.means, sample_n(tempdf, 1, weight = weights))
}
}
while(sum((k.means - ik.means)^2) != 0){
ik.means = k.means
tempdf = as.matrix(x)
clust = rep(NA, nrow(tempdf))
dists = rep(NA, nrow(tempdf))
for(i in 1:nrow(tempdf)){
tempdist = as.matrix(dist(rbind(k.means, tempdf[i,])))
tempdist = tempdist[nrow(tempdist), 1:nrow(tempdist)-1]
clust[i] = which.min(tempdist)
dists[i] = min(tempdist)
}
tempdf = cbind(tempdf, clust, dists)
SSE = sum(dists^2)
k.means = cbind(tapply(tempdf[,1], tempdf[,3], mean),
tapply(tempdf[,2], tempdf[,3], mean))
}
return(list('Clustering vector' = tempdf[,3], 'Cluster Means' = k.means, 'Total SSE' = SSE))
}
k_means(mtcars)
library(tidyverse)
k_means(mtcars)
k_means(mtcars, 3)
kmeans(mtcars, 4)
kmeans(mtcars, 3)
